// <auto-generated />
using System;
using DigitalWorldOnline.Infraestructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DigitalWorldOnline.Infraestructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230527182015_AccessoryStatusEnum")]
    partial class AccessoryStatusEnum
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Account.AccountBlockDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AccountBlock", "Account");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Account.AccountDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar");

                    b.Property<DateTime?>("LastConnection")
                        .HasColumnType("datetime2");

                    b.Property<long>("LastPlayedCharacter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<long>("LastPlayedServer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<DateTime?>("MembershipExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("varchar");

                    b.Property<int>("Premium")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("ReceiveWelcome")
                        .HasColumnType("bit");

                    b.Property<string>("SecondaryPassword")
                        .HasMaxLength(250)
                        .HasColumnType("varchar");

                    b.Property<int>("Silk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Account", "Account");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Account.LoginTryDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.Property<int>("Result")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(4);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("LoginTry", "Security");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Account.SystemInformationDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Cpu")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Gpu")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Ip")
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("SystemInformation", "Account");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.AccessoryRollAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("RerollAmount")
                        .HasColumnType("int");

                    b.Property<int>("StatusAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AccessoryRoll", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.AccessoryRollStatusAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccessoryRollAssetId")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<int>("MinValue")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccessoryRollAssetId");

                    b.ToTable("AccessoryRollStatus", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.BuffAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("BuffId")
                        .HasColumnType("int");

                    b.Property<short>("Class")
                        .HasColumnType("smallint");

                    b.Property<int>("ConditionLevel")
                        .HasColumnType("int");

                    b.Property<int>("DigimonSkillCode")
                        .HasColumnType("int");

                    b.Property<int>("LifeType")
                        .HasColumnType("int");

                    b.Property<int>("MinLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillCode")
                        .HasColumnType("int");

                    b.Property<int>("TimeType")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Buff", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.CharacterBaseStatusAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ARValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ASValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ATValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("BLValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CTValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("DEValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("DSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("EVValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("HPValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("HTValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("MSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("WSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("CharacterBaseStatus", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.CharacterLevelStatusAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ARValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ASValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ATValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("BLValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CTValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("DEValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("DSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("EVValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<long>("ExpValue")
                        .HasColumnType("bigint");

                    b.Property<int>("HPValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("HTValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<int>("MSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(80001);

                    b.Property<int>("WSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("CharacterLevelStatus", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.DigicloneAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("BreakChance")
                        .HasColumnType("numeric");

                    b.Property<int>("DigicloneEnchantStatus")
                        .HasColumnType("int");

                    b.Property<byte>("EnchantLevel")
                        .HasColumnType("tinyint");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<short>("MaximumValue")
                        .HasColumnType("smallint");

                    b.Property<short>("MinimalValue")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<decimal>("UpgradeChance")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Digiclone", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.DigimonBaseInfoAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ARValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ASValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ATValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Attribute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("BLValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CTValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("DEValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("DSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("EVValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Element")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("EvolutionType")
                        .HasColumnType("int");

                    b.Property<int>("Family1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Family2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Family3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("HPValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("HTValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("HuntRange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<int>("MSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Model")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("ReactionType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<byte>("ScaleType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("ViewRange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("WSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("DigimonBaseInfo", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.DigimonLevelStatusAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ARValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ASValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ATValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("BLValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CTValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("DEValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("DSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("EVValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<long>("ExpValue")
                        .HasColumnType("bigint");

                    b.Property<int>("HPValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("HTValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<int>("MSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ScaleType")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("WSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("DigimonLevelStatus", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.DigimonSkillAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<byte>("Slot")
                        .HasColumnType("tinyint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DigimonSkill", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.EvolutionAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EvolutionListId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EvolutionListId");

                    b.ToTable("Evolution", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.EvolutionLineAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EvolutionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EvolutionId")
                        .IsUnique();

                    b.ToTable("EvolutionLine", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.EvolutionListAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("EvolutionList", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.EvolutionStageAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EvolutionLineId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EvolutionLineId");

                    b.ToTable("EvolutionStage", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.ItemAssetDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("DigimonMaxLevel")
                        .HasColumnType("tinyint");

                    b.Property<byte>("DigimonMinLevel")
                        .HasColumnType("tinyint");

                    b.Property<string>("ENName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<byte>("ItemBoundType")
                        .HasColumnType("tinyint");

                    b.Property<int>("ItemPriceInDigicore")
                        .HasColumnType("int");

                    b.Property<long>("ItemSellPrice")
                        .HasColumnType("bigint");

                    b.Property<int>("ItemType")
                        .HasColumnType("int");

                    b.Property<short>("OverLap")
                        .HasColumnType("smallint");

                    b.Property<int>("ScanPrice")
                        .HasColumnType("int");

                    b.Property<long>("SkillCode")
                        .HasColumnType("bigint");

                    b.Property<byte>("TamerMaxLevel")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TamerMinLevel")
                        .HasColumnType("tinyint");

                    b.Property<int>("Target")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("UsageTimeInMinutes")
                        .HasColumnType("int");

                    b.Property<byte>("UseTimesType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Item", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.ItemCraftAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("NpcId")
                        .HasColumnType("int");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<int>("SequencialId")
                        .HasColumnType("int");

                    b.Property<byte>("SuccessRate")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("ItemCraft", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.ItemCraftMaterialAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<long>("ItemCraftId")
                        .HasColumnType("bigint");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemCraftId");

                    b.ToTable("ItemCraftMaterial", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.MapAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AditionalMapNumber")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<int>("MapNumber")
                        .HasColumnType("int");

                    b.Property<int>("MapRegionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Map", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.MapRegionAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("Index")
                        .HasColumnType("tinyint");

                    b.Property<long>("MapRegionListId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<int>("X")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(6500);

                    b.Property<int>("Y")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(6500);

                    b.HasKey("Id");

                    b.HasIndex("MapRegionListId");

                    b.ToTable("MapRegion", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.MapRegionListAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("MapRegionList", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.MonsterBaseInfoAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ARValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ASValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ATValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Attribute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("BLValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CTValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("DEValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("DSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("EVValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Element")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Family1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Family2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Family3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("HPValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("HTValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("HuntRange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<int>("MSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Model")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("ReactionType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<byte>("ScaleType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("ViewRange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("WSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("MonsterBaseInfo", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.MonsterSkillAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<byte>("Slot")
                        .HasColumnType("tinyint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MonsterSkill", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.ProgressAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ProgressId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Progress", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.ScanDetailAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<byte>("MaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<byte>("MinAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.HasKey("Id");

                    b.ToTable("ScanDetail", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.ScanRewardDetailAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Chance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<int>("MaxAmount")
                        .HasColumnType("int");

                    b.Property<int>("MinAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("Rare")
                        .HasColumnType("bit");

                    b.Property<long>("ScanDetailAssetId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ScanDetailAssetId");

                    b.ToTable("ScanRewardDetail", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.SealDetailAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ARValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ASValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ATValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("BLValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CTValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("DEValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("DSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("EVValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("HPValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("HTValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("MSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<short>("RequiredAmount")
                        .HasColumnType("smallint");

                    b.Property<int>("SealId")
                        .HasColumnType("int");

                    b.Property<short>("SequentialId")
                        .HasColumnType("smallint");

                    b.Property<int>("WSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("SealDetail", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.SkillCodeApplyAssetDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdditionalValue")
                        .HasColumnType("int");

                    b.Property<int>("Attribute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(20);

                    b.Property<int>("SkillCodeAssetId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(101);

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillCodeAssetId");

                    b.ToTable("SkillCodeApply", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.SkillCodeAssetDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<long>("SkillCode")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("SkillCode", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.SkillInfoAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AoEMaxDamage")
                        .HasColumnType("int");

                    b.Property<int>("AoEMinDamage")
                        .HasColumnType("int");

                    b.Property<int>("AreaOfEffect")
                        .HasColumnType("int");

                    b.Property<decimal>("CastingTime")
                        .HasColumnType("numeric");

                    b.Property<int>("Cooldown")
                        .HasColumnType("int");

                    b.Property<int>("DSUsage")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<int>("FirstConditionCode")
                        .HasColumnType("int");

                    b.Property<int>("HPUsage")
                        .HasColumnType("int");

                    b.Property<byte>("MaxLevel")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MemoryChips")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("Range")
                        .HasColumnType("int");

                    b.Property<byte>("RequiredPoints")
                        .HasColumnType("tinyint");

                    b.Property<int>("SecondConditionCode")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<byte>("Target")
                        .HasColumnType("tinyint");

                    b.Property<int>("ThirdConditionCode")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<byte>("UnlockLevel")
                        .HasColumnType("tinyint");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SkillInfo", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.StatusApplyAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ApplyValue")
                        .HasColumnType("int");

                    b.Property<int>("StageValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StatusApply", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.TitleStatusAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ARValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ASValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ATValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("AchievementId")
                        .HasColumnType("int");

                    b.Property<int>("BLValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CTValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("DASCD")
                        .HasColumnType("numeric");

                    b.Property<int>("DEValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("DSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("EVValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("FISCD")
                        .HasColumnType("numeric");

                    b.Property<int>("HPValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("HTValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("ICSCD")
                        .HasColumnType("numeric");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("LASCD")
                        .HasColumnType("numeric");

                    b.Property<decimal>("LISCD")
                        .HasColumnType("numeric");

                    b.Property<int>("MSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal>("NESCD")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<decimal>("SCD")
                        .HasColumnType("numeric");

                    b.Property<decimal>("STSCD")
                        .HasColumnType("numeric");

                    b.Property<decimal>("THSCD")
                        .HasColumnType("numeric");

                    b.Property<decimal>("WASCD")
                        .HasColumnType("numeric");

                    b.Property<decimal>("WISCD")
                        .HasColumnType("numeric");

                    b.Property<decimal>("WOSCD")
                        .HasColumnType("numeric");

                    b.Property<int>("WSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("TitleStatus", "Asset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.XaiAssetDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<short>("XCrystals")
                        .HasColumnType("smallint");

                    b.Property<int>("XGauge")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Xai", "Asset");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ItemId = 40017,
                            XCrystals = (short)3,
                            XGauge = 2000
                        });
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Base.ItemAccessoryStatusDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.Property<short>("Value")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemAccessoryStatus", "Shared");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Base.ItemDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<long>("ItemListId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Power")
                        .HasColumnType("tinyint");

                    b.Property<int>("RemainingTime")
                        .HasColumnType("int");

                    b.Property<byte>("RerollLeft")
                        .HasColumnType("tinyint");

                    b.Property<int>("TamerShopSellPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemListId");

                    b.ToTable("Item", "Shared");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Base.ItemListDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("Bits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<long?>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Size")
                        .HasColumnType("tinyint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CharacterId");

                    b.ToTable("ItemList", "Shared");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterActiveEvolutionDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<int>("DsPerSecond")
                        .HasColumnType("int");

                    b.Property<int>("XgPerSecond")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("ActiveEvolution", "Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterBuffDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BuffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<long>("BuffListId")
                        .HasColumnType("bigint");

                    b.Property<int>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("EndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("BuffListId");

                    b.ToTable("Buff", "Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterBuffListDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("BuffList", "Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Channel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)255);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("CurrentDs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(40);

                    b.Property<long>("CurrentExperience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<int>("CurrentHp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(50);

                    b.Property<short>("CurrentTitle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<byte>("DigimonSlots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)3);

                    b.Property<long?>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<int>("Model")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(80001);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar");

                    b.Property<short>("Position")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<long>("ServerId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<short>("XCrystals")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<int>("XGauge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("Tamer", "Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterFoeDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Annotation")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<long>("FoeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Foe", "Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterFriendDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Annotation")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<long>("FriendId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Friend", "Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterIncubatorDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("BackupDiskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1);

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<int>("EggId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1);

                    b.Property<byte>("HatchLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("Incubator", "Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterLocationDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<short>("MapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<int>("X")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5000);

                    b.Property<int>("Y")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(4500);

                    b.Property<decimal>("Z")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("Location", "Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterMapRegionDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Unlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("MapRegion", "Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterProgressDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<string>("CompletedData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompletedDataValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("Progress", "Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterSealDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<bool>("Favorite")
                        .HasColumnType("bit");

                    b.Property<int>("SealId")
                        .HasColumnType("int");

                    b.Property<long>("SealListId")
                        .HasColumnType("bigint");

                    b.Property<short>("SequentialId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("SealListId");

                    b.ToTable("Seal", "Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterSealListDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<short>("SealLeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("SealList", "Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterXaiDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte>("XCrystals")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<short>("XGauge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("XaiInfo", "Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Chat.ChatMessageDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("ChatMessage", "Security");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Config.BitsDropConfigDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Chance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<long>("DropRewardId")
                        .HasColumnType("bigint");

                    b.Property<int>("MaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("MinAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("DropRewardId")
                        .IsUnique();

                    b.ToTable("BitsDropReward", "Config");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Config.ItemDropConfigDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Chance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.Property<long>("DropRewardId")
                        .HasColumnType("bigint");

                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("MaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("MinAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("DropRewardId");

                    b.ToTable("ItemDropReward", "Config");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Config.MapConfigDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Map", "Config");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Config.MobConfigDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ARValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ASValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("ATValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Attribute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("BLValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CTValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("DEValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("DSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("EVValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Element")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Family1")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Family2")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Family3")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<long>("GameMapConfigId")
                        .HasColumnType("bigint");

                    b.Property<int>("HPValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("HTValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("HuntRange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<int>("MSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Model")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("ReactionType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("RespawnInterval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<byte>("ScaleType")
                        .HasColumnType("tinyint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("ViewRange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("WSValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("GameMapConfigId");

                    b.ToTable("Mob", "Config");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Config.MobDropRewardConfigDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("MaxAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<byte>("MinAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<long>("MobId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MobId")
                        .IsUnique();

                    b.ToTable("MobDropReward", "Config");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Config.MobExpRewardConfigDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("DigimonExperience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<short>("ElementExperience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<long>("MobId")
                        .HasColumnType("bigint");

                    b.Property<short>("NatureExperience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<short>("SkillExperience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<long>("TamerExperience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.HasKey("Id");

                    b.HasIndex("MobId")
                        .IsUnique();

                    b.ToTable("MobExpReward", "Config");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Config.MobLocationConfigDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<short>("MapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<long>("MobConfigId")
                        .HasColumnType("bigint");

                    b.Property<int>("X")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5000);

                    b.Property<int>("Y")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(4500);

                    b.Property<decimal>("Z")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("MobConfigId")
                        .IsUnique();

                    b.ToTable("MobLocation", "Config");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Config.UserDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("User", "Config");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessLevel = 15,
                            Password = "pMgM+NOH0Z+RwR9F1iFVOOwKrW1iDaifx4jWDnH1Dbo=",
                            Username = "masteradmin"
                        });
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Config.WelcomeMessageConfigDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("WelcomeMessage", "Config");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Enabled = false,
                            Message = "1 1 1 1 1 1 0 0 1 1 1"
                        },
                        new
                        {
                            Id = 2L,
                            Enabled = true,
                            Message = "Please, drink some water! :)"
                        },
                        new
                        {
                            Id = 3L,
                            Enabled = true,
                            Message = "Did you hear that?"
                        },
                        new
                        {
                            Id = 4L,
                            Enabled = true,
                            Message = "Remember to feed your pet."
                        },
                        new
                        {
                            Id = 5L,
                            Enabled = true,
                            Message = "Not a Pokémon game."
                        },
                        new
                        {
                            Id = 6L,
                            Enabled = true,
                            Message = "Warning: Chat may be toxic."
                        },
                        new
                        {
                            Id = 7L,
                            Enabled = true,
                            Message = "Be yourself!"
                        },
                        new
                        {
                            Id = 8L,
                            Enabled = true,
                            Message = "Welcome to DSO!"
                        },
                        new
                        {
                            Id = 9L,
                            Enabled = true,
                            Message = "Do you like chocolate?"
                        },
                        new
                        {
                            Id = 10L,
                            Enabled = true,
                            Message = "Here we go again!"
                        },
                        new
                        {
                            Id = 11L,
                            Enabled = true,
                            Message = "Join our Discord! discord.gg/dsooficial"
                        },
                        new
                        {
                            Id = 12L,
                            Enabled = true,
                            Message = "Can you see that mountain over there?"
                        },
                        new
                        {
                            Id = 13L,
                            Enabled = true,
                            Message = "\"Look into the source\""
                        },
                        new
                        {
                            Id = 14L,
                            Enabled = true,
                            Message = "The staff will NEVER ask your password!"
                        },
                        new
                        {
                            Id = 15L,
                            Enabled = true,
                            Message = "Y0ur br4in 1s am4z1ng!"
                        },
                        new
                        {
                            Id = 16L,
                            Enabled = true,
                            Message = "This is the rythm of the night! (8)"
                        },
                        new
                        {
                            Id = 17L,
                            Enabled = false,
                            Message = "Happy new eyer !!!"
                        });
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Digimon.AttributeExperienceDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<short>("Dark")
                        .HasColumnType("smallint");

                    b.Property<short>("Data")
                        .HasColumnType("smallint");

                    b.Property<long>("DigimonId")
                        .HasColumnType("bigint");

                    b.Property<short>("Fire")
                        .HasColumnType("smallint");

                    b.Property<short>("Ice")
                        .HasColumnType("smallint");

                    b.Property<short>("Land")
                        .HasColumnType("smallint");

                    b.Property<short>("Light")
                        .HasColumnType("smallint");

                    b.Property<short>("Steel")
                        .HasColumnType("smallint");

                    b.Property<short>("Thunder")
                        .HasColumnType("smallint");

                    b.Property<short>("Vaccine")
                        .HasColumnType("smallint");

                    b.Property<short>("Virus")
                        .HasColumnType("smallint");

                    b.Property<short>("Water")
                        .HasColumnType("smallint");

                    b.Property<short>("Wind")
                        .HasColumnType("smallint");

                    b.Property<short>("Wood")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("DigimonId")
                        .IsUnique();

                    b.ToTable("AttributeExperience", "Digimon");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Digimon.DigicloneDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("ATLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<short>("ATValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<byte>("BLLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<short>("BLValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<byte>("CTLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<short>("CTValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<long>("DigimonId")
                        .HasColumnType("bigint");

                    b.Property<byte>("EVLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<short>("EVValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<byte>("HPLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<short>("HPValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.HasKey("Id");

                    b.HasIndex("DigimonId")
                        .IsUnique();

                    b.ToTable("Digiclone", "Digimon");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonBuffDTO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BuffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<long>("BuffListId")
                        .HasColumnType("bigint");

                    b.Property<int>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("EndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("BuffListId");

                    b.ToTable("Buff", "Digimon");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonBuffListDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("DigimonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DigimonId")
                        .IsUnique();

                    b.ToTable("BuffList", "Digimon");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("BaseType")
                        .HasColumnType("int");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("CurrentDs")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(140);

                    b.Property<long>("CurrentExperience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<int>("CurrentHp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(150);

                    b.Property<long>("CurrentSkillExperience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<int>("CurrentType")
                        .HasColumnType("int");

                    b.Property<byte>("Friendship")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<int>("HatchGrade")
                        .HasColumnType("int");

                    b.Property<byte>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<int>("Model")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar");

                    b.Property<short>("Size")
                        .HasColumnType("smallint");

                    b.Property<long>("TranscendenceExperience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Digimon", "Digimon");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonEvolutionDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("DigimonId")
                        .HasColumnType("bigint");

                    b.Property<byte>("SkillPoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<bool>("Unlocked")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DigimonId");

                    b.ToTable("Evolution", "Digimon");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonEvolutionSkillDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("CurrentLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<long>("EvolutionId")
                        .HasColumnType("bigint");

                    b.Property<byte>("MaxLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)20);

                    b.HasKey("Id");

                    b.HasIndex("EvolutionId");

                    b.ToTable("EvolutionSkill", "Digimon");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonLocationDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("DigimonId")
                        .HasColumnType("bigint");

                    b.Property<short>("MapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0);

                    b.Property<int>("X")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5000);

                    b.Property<int>("Y")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(4500);

                    b.Property<decimal>("Z")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("DigimonId")
                        .IsUnique();

                    b.ToTable("Location", "Digimon");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Events.AttendanceRewardDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<byte>("TotalDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("AttendanceReward", "Event");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Events.TimeRewardDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<int>("RewardIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("TimeReward", "Event");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Mechanics.GuildAuthorityDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Class")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(4);

                    b.Property<string>("Duty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("Authority", "Guild");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Mechanics.GuildDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("CurrentExperience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte>("ExtraSlots")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<byte>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Notice")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.ToTable("Guild", "Guild");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Mechanics.GuildHistoricDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<int>("MasterClass")
                        .HasColumnType("int");

                    b.Property<string>("MasterName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("MemberClass")
                        .HasColumnType("int");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("Historic", "Guild");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Mechanics.GuildMemberDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Authority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(4);

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<int>("Contribution")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("GuildId");

                    b.ToTable("Member", "Guild");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Mechanics.GuildSkillDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("Skill", "Guild");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Server.ServerDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("Experience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("Maintenance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<bool>("New")
                        .HasColumnType("bit");

                    b.Property<int>("Overload")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Server", "Account");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Shop.ConsignedShopDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("Channel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)0);

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<int>("GeneralHandler")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.ToTable("ConsignedShop", "Shop");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Shop.ConsignedShopLocationDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ConsignedShopId")
                        .HasColumnType("bigint");

                    b.Property<short>("MapId")
                        .HasColumnType("smallint");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.Property<float>("Z")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ConsignedShopId")
                        .IsUnique();

                    b.ToTable("ConsignedShopLocationDTO");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Account.AccountBlockDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Account.AccountDTO", "Account")
                        .WithOne("AccountBlock")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Account.AccountBlockDTO", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Account.SystemInformationDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Account.AccountDTO", "Account")
                        .WithOne("SystemInformation")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Account.SystemInformationDTO", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.AccessoryRollStatusAssetDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Assets.AccessoryRollAssetDTO", "AccessoryRollAsset")
                        .WithMany("Status")
                        .HasForeignKey("AccessoryRollAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessoryRollAsset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.EvolutionAssetDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Assets.EvolutionListAssetDTO", "EvolutionList")
                        .WithMany("Evolutions")
                        .HasForeignKey("EvolutionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvolutionList");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.EvolutionLineAssetDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Assets.EvolutionAssetDTO", "Evolution")
                        .WithOne("MainLine")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Assets.EvolutionLineAssetDTO", "EvolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evolution");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.EvolutionStageAssetDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Assets.EvolutionLineAssetDTO", "EvolutionLine")
                        .WithMany("Stages")
                        .HasForeignKey("EvolutionLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvolutionLine");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.ItemCraftMaterialAssetDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Assets.ItemCraftAssetDTO", "ItemCraft")
                        .WithMany("Materials")
                        .HasForeignKey("ItemCraftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemCraft");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.MapRegionAssetDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Assets.MapRegionListAssetDTO", "MapRegionList")
                        .WithMany("Regions")
                        .HasForeignKey("MapRegionListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MapRegionList");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.ScanRewardDetailAssetDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Assets.ScanDetailAssetDTO", "ScanDetailAsset")
                        .WithMany("Rewards")
                        .HasForeignKey("ScanDetailAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScanDetailAsset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.SkillCodeApplyAssetDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Assets.SkillCodeAssetDTO", "SkillCodeAsset")
                        .WithMany("Apply")
                        .HasForeignKey("SkillCodeAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillCodeAsset");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Base.ItemAccessoryStatusDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Base.ItemDTO", "Item")
                        .WithMany("AccessoryStatus")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Base.ItemDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Base.ItemListDTO", "ItemList")
                        .WithMany("Items")
                        .HasForeignKey("ItemListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemList");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Base.ItemListDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Account.AccountDTO", null)
                        .WithMany("ItemList")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Character.CharacterDTO", null)
                        .WithMany("ItemList")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterActiveEvolutionDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Character.CharacterDTO", "Character")
                        .WithOne("ActiveEvolution")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Character.CharacterActiveEvolutionDTO", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterBuffDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Character.CharacterBuffListDTO", "BuffList")
                        .WithMany("Buffs")
                        .HasForeignKey("BuffListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuffList");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterBuffListDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Character.CharacterDTO", "Character")
                        .WithOne("BuffList")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Character.CharacterBuffListDTO", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Mechanics.GuildDTO", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterFoeDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Character.CharacterDTO", "Character")
                        .WithMany("Foes")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterFriendDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Character.CharacterDTO", "Character")
                        .WithMany("Friends")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterIncubatorDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Character.CharacterDTO", "Character")
                        .WithOne("Incubator")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Character.CharacterIncubatorDTO", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterLocationDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Character.CharacterDTO", "Character")
                        .WithOne("Location")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Character.CharacterLocationDTO", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterMapRegionDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Character.CharacterDTO", "Character")
                        .WithMany("MapRegions")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterProgressDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Character.CharacterDTO", "Character")
                        .WithOne("Progress")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Character.CharacterProgressDTO", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterSealDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Character.CharacterSealListDTO", "SealList")
                        .WithMany("Seals")
                        .HasForeignKey("SealListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SealList");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterSealListDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Character.CharacterDTO", "Character")
                        .WithOne("SealList")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Character.CharacterSealListDTO", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterXaiDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Character.CharacterDTO", "Character")
                        .WithOne("Xai")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Character.CharacterXaiDTO", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Chat.ChatMessageDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Character.CharacterDTO", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Config.BitsDropConfigDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Config.MobDropRewardConfigDTO", "DropReward")
                        .WithOne("BitsDrop")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Config.BitsDropConfigDTO", "DropRewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DropReward");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Config.ItemDropConfigDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Config.MobDropRewardConfigDTO", "DropReward")
                        .WithMany("Drops")
                        .HasForeignKey("DropRewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DropReward");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Config.MobConfigDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Config.MapConfigDTO", "GameMapConfig")
                        .WithMany("Mobs")
                        .HasForeignKey("GameMapConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameMapConfig");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Config.MobDropRewardConfigDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Config.MobConfigDTO", "Mob")
                        .WithOne("DropReward")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Config.MobDropRewardConfigDTO", "MobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mob");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Config.MobExpRewardConfigDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Config.MobConfigDTO", "Mob")
                        .WithOne("ExpReward")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Config.MobExpRewardConfigDTO", "MobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mob");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Config.MobLocationConfigDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Config.MobConfigDTO", "MobConfig")
                        .WithOne("Location")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Config.MobLocationConfigDTO", "MobConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MobConfig");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Digimon.AttributeExperienceDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonDTO", "Digimon")
                        .WithOne("AttributeExperience")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Digimon.AttributeExperienceDTO", "DigimonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Digimon");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Digimon.DigicloneDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonDTO", "Digimon")
                        .WithOne("Digiclone")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Digimon.DigicloneDTO", "DigimonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Digimon");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonBuffDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonBuffListDTO", "BuffList")
                        .WithMany("Buffs")
                        .HasForeignKey("BuffListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuffList");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonBuffListDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonDTO", "Digimon")
                        .WithOne("BuffList")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonBuffListDTO", "DigimonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Digimon");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Character.CharacterDTO", "Character")
                        .WithMany("Digimons")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonEvolutionDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonDTO", "Digimon")
                        .WithMany("Evolutions")
                        .HasForeignKey("DigimonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Digimon");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonEvolutionSkillDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonEvolutionDTO", "Evolution")
                        .WithMany("Skills")
                        .HasForeignKey("EvolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evolution");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonLocationDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonDTO", "Digimon")
                        .WithOne("Location")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonLocationDTO", "DigimonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Digimon");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Events.AttendanceRewardDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Character.CharacterDTO", "Character")
                        .WithOne("AttendanceReward")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Events.AttendanceRewardDTO", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Events.TimeRewardDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Character.CharacterDTO", "Character")
                        .WithOne("TimeReward")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Events.TimeRewardDTO", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Mechanics.GuildAuthorityDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Mechanics.GuildDTO", "Guild")
                        .WithMany("Authority")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Mechanics.GuildHistoricDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Mechanics.GuildDTO", "Guild")
                        .WithMany("Historic")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Mechanics.GuildMemberDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Character.CharacterDTO", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Mechanics.GuildDTO", "Guild")
                        .WithMany("Members")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Mechanics.GuildSkillDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Mechanics.GuildDTO", "Guild")
                        .WithMany("Skills")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Shop.ConsignedShopDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Character.CharacterDTO", "Character")
                        .WithOne("ConsignedShop")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Shop.ConsignedShopDTO", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Shop.ConsignedShopLocationDTO", b =>
                {
                    b.HasOne("DigitalWorldOnline.Commons.DTOs.Shop.ConsignedShopDTO", "ConsignedShop")
                        .WithOne("Location")
                        .HasForeignKey("DigitalWorldOnline.Commons.DTOs.Shop.ConsignedShopLocationDTO", "ConsignedShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsignedShop");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Account.AccountDTO", b =>
                {
                    b.Navigation("AccountBlock");

                    b.Navigation("ItemList");

                    b.Navigation("SystemInformation");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.AccessoryRollAssetDTO", b =>
                {
                    b.Navigation("Status");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.EvolutionAssetDTO", b =>
                {
                    b.Navigation("MainLine")
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.EvolutionLineAssetDTO", b =>
                {
                    b.Navigation("Stages");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.EvolutionListAssetDTO", b =>
                {
                    b.Navigation("Evolutions");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.ItemCraftAssetDTO", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.MapRegionListAssetDTO", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.ScanDetailAssetDTO", b =>
                {
                    b.Navigation("Rewards");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Assets.SkillCodeAssetDTO", b =>
                {
                    b.Navigation("Apply");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Base.ItemDTO", b =>
                {
                    b.Navigation("AccessoryStatus");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Base.ItemListDTO", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterBuffListDTO", b =>
                {
                    b.Navigation("Buffs");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterDTO", b =>
                {
                    b.Navigation("ActiveEvolution")
                        .IsRequired();

                    b.Navigation("AttendanceReward")
                        .IsRequired();

                    b.Navigation("BuffList")
                        .IsRequired();

                    b.Navigation("ConsignedShop")
                        .IsRequired();

                    b.Navigation("Digimons");

                    b.Navigation("Foes");

                    b.Navigation("Friends");

                    b.Navigation("Incubator")
                        .IsRequired();

                    b.Navigation("ItemList");

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("MapRegions");

                    b.Navigation("Progress")
                        .IsRequired();

                    b.Navigation("SealList")
                        .IsRequired();

                    b.Navigation("TimeReward")
                        .IsRequired();

                    b.Navigation("Xai")
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Character.CharacterSealListDTO", b =>
                {
                    b.Navigation("Seals");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Config.MapConfigDTO", b =>
                {
                    b.Navigation("Mobs");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Config.MobConfigDTO", b =>
                {
                    b.Navigation("DropReward");

                    b.Navigation("ExpReward");

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Config.MobDropRewardConfigDTO", b =>
                {
                    b.Navigation("BitsDrop")
                        .IsRequired();

                    b.Navigation("Drops");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonBuffListDTO", b =>
                {
                    b.Navigation("Buffs");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonDTO", b =>
                {
                    b.Navigation("AttributeExperience")
                        .IsRequired();

                    b.Navigation("BuffList")
                        .IsRequired();

                    b.Navigation("Digiclone")
                        .IsRequired();

                    b.Navigation("Evolutions");

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Digimon.DigimonEvolutionDTO", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Mechanics.GuildDTO", b =>
                {
                    b.Navigation("Authority");

                    b.Navigation("Historic");

                    b.Navigation("Members");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("DigitalWorldOnline.Commons.DTOs.Shop.ConsignedShopDTO", b =>
                {
                    b.Navigation("Location")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
